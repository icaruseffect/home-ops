---
substitutions:
  host_name: sensor-heating
  device_name: sensor_heating
  friendly_name: Sensor Heating

esphome:
  name: ${host_name}
  # platform: ESP8266
  # board: nodemcuv2

esp32:
  board: m5stack-atom

# Enable logging
logger:
  level: INFO
  logs:
    mqtt.component: INFO
    mqtt.client: INFO
    dallas.sensor: INFO

globals:
  - id: min_temp
    type: float
    restore_value: yes
    initial_value: "24.0"
  - id: max_temp
    type: float
    restore_value: yes
    initial_value: "24.0"
  - id: heating
    type: bool
    restore_value: yes
    initial_value: "false"

web_server:
  port: 80

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encription_key
  # id: espapi
  port: 6053
  reboot_timeout: 5min
  services:
    - service: set_heating_min_temp
      variables:
        heating_min_temp: float
      then:
        - logger.log:
            format: "Setting ${friendly_name} min_temp value: %.1f"
            args: [heating_min_temp]
        - globals.set:
            id: min_temp
            value: !lambda "return (heating_min_temp);"
        - logger.log:
            format: "${friendly_name} min_temp value: %.1f"
            args: [id(min_temp)]
    - service: set_heating_max_temp
      variables:
        heating_max_temp: float
      then:
        - logger.log:
            format: "Setting ${friendly_name} max_temp value: %.1f"
            args: [heating_max_temp]
        - globals.set:
            id: max_temp
            value: !lambda "return (heating_max_temp);"
        - logger.log:
            format: "${friendly_name} max_temp value: %.1f"
            args: [id(max_temp)]

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.1.149

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPHome ${device_name} Hotspot"
    password: !secret ap_password

captive_portal:

# MQTT
mqtt:
  # disable mqtt logging
  log_topic:
  id: mqtt_client
  broker: !secret mqtt_broker
  client_id: esphome_${device_name}
  discovery: false
  discovery_retain: true
  topic_prefix: ESPHome/${device_name}
  birth_message:
    topic: ESPHome/${device_name}/state
    payload: 1
    qos: 2
    retain: true
  shutdown_message:
    topic: ESPHome/${device_name}/state
    payload: 0
    qos: 2
    retain: true
  will_message:
    topic: ESPHome/${device_name}/state
    payload: 0
    qos: 2
    retain: true

# web_server:
#   port: 80
#   auth:
#     username: !secret web_username
#     password: !secret web_password
#   ota: false

# expose prometheus data
prometheus:

dallas:
  - pin: GPIO22
    update_interval: 15s

# [21:29:42][D][dallas.sensor:077]:   Found sensors:
# [21:29:42][D][dallas.sensor:080]:     0x900416C50360FF28 => RL EG
# [21:29:42][D][dallas.sensor:080]:     0x060416C4E395FF28 => VL OG
# [21:29:42][D][dallas.sensor:080]:     0xE20516D07C0BFF28 => VL EG
# [21:29:42][D][dallas.sensor:080]:     0xF1031701A437FF28 => RL OG

text_sensor:
  # wifi info
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} WiFi IP"
  - platform: version
    name: "${friendly_name} Firmware"

  - platform: template
    name: "${friendly_name} MAC Address"
    lambda: "return {WiFi.macAddress().c_str()};"
    icon: mdi:fingerprint
    update_interval: 60s
    internal: true

  - platform: template
    name: "${friendly_name} Wifi Strength"
    id: ${device_name}_wifi_strength
    icon: "mdi:wifi"
    lambda: |-
      if (id(${device_name}_wifi_signal).state > -50 ) {
        return {"Excellent"};
      } else if (id(${device_name}_wifi_signal).state > -60) {
        return {"Good"};
      } else if (id(${device_name}_wifi_signal).state > -70) {
        return {"Fair"};
      } else if (id(${device_name}_wifi_signal).state < -70) {
        return {"Weak"};
      } else {
        return {"None"};
      }
    update_interval: 30s

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

script:
  - id: heat
    then:
      - logger.log:
          format: "Heating START"
      - globals.set:
          id: heating
          value: "true"
      - switch.turn_on: relay1
      - delay: 45s
      - switch.turn_off: relay1

  - id: stop_heat
    then:
      - logger.log:
          format: "Heating STOP"
      - switch.turn_on: relay2
      - delay: 45s
      - switch.turn_off: relay2
      - globals.set:
          id: heating
          value: "false"

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    disabled_by_default: true
    # on_raw_value:
    #   then:
    #     - text_sensor.template.publish:
    #         id: uptime_human
    #         state: !lambda |-
    #           int seconds = round(id(uptime_sensor).raw_state);
    #           int days = seconds / (24 * 3600);
    #           seconds = seconds % (24 * 3600);
    #           int hours = seconds / 3600;
    #           seconds = seconds % 3600;
    #           int minutes = seconds /  60;
    #           seconds = seconds % 60;
    #           return (
    #             (days ? to_string(days) + "d " : "") +
    #             (hours ? to_string(hours) + "h " : "") +
    #             (minutes ? to_string(minutes) + "m " : "") +
    #             (to_string(seconds) + "s")
    #           ).c_str();
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    id: ${device_name}_wifi_signal
    update_interval: 30s
    internal: true

  - platform: dallas
    address: 0x900416C50360FF28
    name: "${friendly_name} Temperature Return Groundfloor"
    resolution: 12
    unit_of_measurement: "째C"
    accuracy_decimals: 1

  - platform: dallas
    address: 0x060416C4E395FF28
    name: "${friendly_name} Temperature Flow Upstairs"
    resolution: 12
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    filters:
      - offset: 0.125
    on_value:
      then:
        - logger.log:
            format: "Dallas sensor value: %.1f"
            args: ["x"]
        - lambda: |-
            if (x < id(min_temp) && id(heating) == false && id(relay1).state == false && id(relay2).state == false) {
              id(heat).execute();
            } else if (x >= id(max_temp) && id(heating) == true && id(relay2).state == false) {
              id(stop_heat).execute();
            }

  - platform: dallas
    address: 0xE20516D07C0BFF28
    name: "${friendly_name} Temperature Flow Groundfloor"
    resolution: 12
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    filters:
      - offset: 0.1875

  - platform: dallas
    address: 0xF1031701A437FF28
    name: "${friendly_name} Temperature Return Upstairs"
    resolution: 12
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    filters:
      - offset: -0.0625

time:
  - platform: homeassistant
    id: homeassistant_time

switch:
  - platform: restart
    name: "${friendly_name} Restart"
    disabled_by_default: true

  # - platform: homeassistant
  #   id: relay1
  #   entity_id: switch.heating_valve_l1

  # - platform: homeassistant
  #   id: relay2
  #   entity_id: switch.heating_valve_l2

  - platform: template
    id: relay1
    optimistic: true
    turn_on_action:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: "switch.heating_valve_l1"
    turn_off_action:
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: "switch.heating_valve_l1"

  - platform: template
    id: relay2
    optimistic: true
    turn_on_action:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: "switch.heating_valve_l2"
    turn_off_action:
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: "switch.heating_valve_l2"
# status_led:
#   # https://esphome.io/components/status_led
#   pin:
#     number: GPIO0
#     inverted: True

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: 27
    num_leds: 1
    rgb_order: GRB
    id: status_led
    name: ${friendly_name} Light
    effects:
      - random:
      - flicker:
      - addressable_rainbow:
